# -*- coding: utf-8 -*-
"""w12ppa5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OSpEQeErZ_jlxyowUlAJ0Rzui5u9rlQt
"""

def balanced(word):
    """
    a string is balanced if,
    *Number of opening parentheses of a given type is equal to the number of closing parentheses of the same type.
    *An opening parenthesis cannot be immediately followed by a closing parenthesis of a different type
    *Every opening parenthesis should be eventually closed by a closing parenthesis of the same type.
    Determine if a string is balanced 
    Argument:
        word: string
    Return:
        result: bool
    """
    para =  ['(',')','[',']','{','}']
    l = []
    
    open = 0
    close = 0
    for char in word:
        if char in para:
            l.append(char)
    #print(l)
    
    for p in l:
        if p == '(' or p == '{' or p == '[':
            open += 1
        if p == ')' or p == '}' or p == ']':
            close += 1
    
    if open != close:
        return False

    bra = ['(',')']
    squ = ['[',']']
    flo = ['{','}']
    op =  ['(','[','{']
    cl = [')',']','}']
    
    while len(l) != 0:
        if len(l) == 0:
            break
        if l[0] in bra:
            if  l[0] in op:
                if l[-1] in bra:
                    if l[-1] in cl:
                         l = l[1:-1]
                    else:
                        return False
                        break
                else:
                    return False
                    break
        
            else:
                return False
                break
        if len(l) == 0:
            break
        
        if l[0] in squ:
            if  l[0] in op:
                if l[-1] in squ:
                    if l[-1] in cl:
                         l = l[1:-1]
                    else:
                        return False
                        break
                else:
                    return False
                    break
        
            else:
                return False
                break

        if len(l) == 0:
            break

        if l[0] in flo:
            if  l[0] in op:
                if l[-1] in flo:
                    if l[-1] in cl:
                         l = l[1:-1]
                    else:
                        return False
                        break
                else:
                    return False
                    break
        
            else:
                return False
                break

    return True

word = '([{}])'  
balanced(word)

