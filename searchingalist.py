# -*- coding: utf-8 -*-
"""searchingalist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qDp_xCQFg55Y4auGSqR4U_y7leAamKVT
"""

def naive_search(L,k):
    for num in L:
        if num == k:
            return True
            
    return False
m = [89,2,3,0,1,-2]
print(naive_search(m,7))

def binary_search(L,k):
    begin = 0
    end = len(L)-1

    while (end-begin)>1:
        mid = (end+begin)//2
        if L[mid] == k:
            return True

        if k>L[mid]:
            begin = mid + 1

        if k<L[mid]:
            end = mid - 1

    if L[begin] == k or L[end] == k:
        return True
    else:
        return False
    
    

L = [1,2,3,4,5,6,7,8]
print(binary_search(L,8))

def binary_search_recursion(L,k):
    

    def helper(L,k,begin,end):
        
        if end == begin:
            return L[begin] == k

        mid = (begin+end)//2

        if L[mid] == k:
            return True
        
        if k<L[mid]:

            if begin == mid: #nothing left to search
                return False
            else:
                return helper(L,k,begin,mid - 1)
        else: 
            return helper(L,k,mid + 1,end)

    if len(L) == 0:
        return False
    
    else:
        return helper(L,k,0,len(L)-1)

L = [1,2,3,4,5,6,7,8]
print(binary_search_recursion(L,-1))

